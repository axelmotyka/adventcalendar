package ThirdRun;

import java.util.ArrayList;
import java.util.List;

public class RacingGame {

  private int amountOfRaces;
  private CompetitorList competitorsList;
  private List<Competitor> currentLineUP;
  private List<Competitor> seasonstartLineUP;


  public RacingGame(int amountOfRaces) {
    this.amountOfRaces = amountOfRaces;

    CompetitorsGenerator cg = new CompetitorsGenerator(); // GENERATE AN COMPETITORS-GENERATOR OBJECT

    competitorsList = new CompetitorList(); // GENERATE A COMPETITOR LIST CALLED "generatedCompetitorsList"
    for (int i = 0; i < 3; i++) { // Generate competitors 1 - 8
      Competitor c = cg.getRandomCompetitor();
      competitorsList.addCompetitor(c);
    }
    System.out.println(competitorsList); // Print out the initial competitor list "generatedCompetitorsList"

    currentLineUP = competitorsList.getCompetitors();
    seasonstartLineUP = new ArrayList<>(currentLineUP);
  }


  private void runSeason() {
    for (int raceNumber = 1; raceNumber <= (amountOfRaces); raceNumber++) {
      System.out.println(raceNumber + " / " + this.amountOfRaces + " starting");
      this.run(raceNumber);
    }
  }


  private void run(int raceNumber) {
    Race currentRace = new Race(currentLineUP, raceNumber, amountOfRaces);
    currentRace.generateStartingLineup();
    System.out.println("Starting: " + currentRace.getStartingLineUP());

    currentRace.race();
    System.out.println("Result  : " + currentRace.getRaceResult());

    String differences = this.calculateDifferencesBetweenTwoRaces(raceNumber, this.currentLineUP, currentRace.getRaceResult());
    System.out.println("Diff    : " + differences);

    String currentStanding = this.getStandingFor(currentRace);
    System.out.println("Result  : " + currentStanding);

    this.currentLineUP = currentRace.getRaceResult();
  }


  public String calculateDifferencesBetweenTwoRaces(int raceNumber, List<Competitor> previousRace, List<Competitor> currentRace) {
    if (raceNumber == 1) {
      return "No previous race yet!";
    }

    String result = "";
    for (int place = 0; place < currentRace.size(); place++) {
      Competitor competitor = currentRace.get(place);

      for (int previousPlace = 0; previousPlace <= previousRace.size(); previousPlace++) {
        Competitor previousCompetitor = previousRace.get(previousPlace);

        if (competitor != previousCompetitor) {
          continue;
        }
        result += "[" + place + "] ";
        if (place == previousPlace) {
          result += "→";
        } else if (place < previousPlace) {
          result += "↑";
        } else {
          result += "↓";
        }
        result += " " + competitor.getDriver().getFirstName() + " " +  competitor.getDriver().getLastName() + ", ";
        break;
      }
    }
    return result;
  }

  public String getStandingFor(Race currentRace) {
    if (currentRace.raceNumber == 1) {
      return "Standing at race 0: " + this.seasonstartLineUP;
    }
    else if(currentRace.raceNumber == currentRace.amountOfRaces){
      return "Final standing at season end: " + this.currentLineUP;
    }
    return "Standing at race " + currentRace.raceNumber + ": " +currentRace;
  }


  public static void main(String[] args) {

    RacingGame r = new RacingGame(8);
    r.runSeason();
  }
}


/**
 * // GENERATE AND PRINT OUT 2 DRIVERS
 * Driver firstDriver = new Driver("Steve", "McQueen", 4); // At first we generate an Driver object and assign it to the VAR firstDriver.
 * System.out.println("Driver: " + firstDriver); // The print out of the object variable firstDriver delivers a text, which is generated by the toString() method.
 * System.out.println("Drivers lastname: " + firstDriver.getLastName()); // We access the firstDriver object and execute its method getLastName delivers the required value.
 * <p>
 * Driver secondDriver = new Driver("Michael", "Schumacher", 1);
 * System.out.println("Driver: " + secondDriver);
 * System.out.println("Drivers first- and lastname: " + secondDriver.getName());
 * <p>
 * <p>
 * // GENERATE AND PRINT OUT 2 VEHICLES
 * Vehicle firstVehicle = new Vehicle("Porsche", "Carrera GT4", 451, Vehicle.EngineType.gasoline);
 * System.out.println("Vehicle: " + firstVehicle);
 * <p>
 * Vehicle secondVehicle = new Vehicle("Dodge", "Challenger", 420, Vehicle.EngineType.diesel);
 * System.out.println("Vehicle: " + secondVehicle);
 * <p>
 * <p>
 * // GENERATE AND PRINT OUT 2 MOTORCYCLES
 * Motorcycle coolMotorcycle = new Motorcycle("Triumph", "Adler", 79, Vehicle.EngineType.gasoline, Motorcycle.MotorcycleType.Chopper, Motorcycle.MotorcycleColor.black, "Seat-Heater" );
 * System.out.println("Motorcycle: " + coolMotorcycle);
 * System.out.println("Motorcycles color: " + coolMotorcycle.getMotorcycleColor());
 * <p>
 * Motorcycle solidMotorcycle = new Motorcycle("BMW", "Gaudi", 57, Vehicle.EngineType.diesel, Motorcycle.MotorcycleType.Allrounder, Motorcycle.MotorcycleColor.metallic, "Roof");
 * System.out.println("Motorcycle: " + solidMotorcycle);
 * System.out.println("Motorcycles extra equipement: " + solidMotorcycle.getExtraEquipement());
 * <p>
 * <p>
 * // GENERATE AND PRINT OUT 2 TRUCKS
 * Truck giantTruck = new Truck("Mack", "Logistiker", 500, Vehicle.EngineType.diesel, Truck.TruckType.Box_Truck, Truck.TruckSize.xxlarge, "Bed & Toilet");
 * System.out.println("Truck: " + giantTruck);
 * System.out.println("Trucks size: " + giantTruck.getTruckSize());
 * <p>
 * Truck powerTruck = new Truck("Volvo", "Scandinavic", 840, Vehicle.EngineType.diesel, Truck.TruckType.Tow_Truck, Truck.TruckSize.xlarge, "Power Booster");
 * System.out.println("Truck: " + powerTruck);
 * System.out.println("Trucks extra equipement: " + powerTruck.getExtraEquipement());
 * <p>
 * // GENERATE A COMPETITOR
 * Competitor competitor = new Competitor(firstDriver, coolMotorcycle, 0);
 * System.out.println(competitor);
 */
